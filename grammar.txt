<language> ::= {<function>} <main_body>
<main_body>::= BEGIN <array_declarations> [<statements>] END
<function>::= DEFINE ID OPPARENT [<function_def_parameters>] CLPARENT OPCURL <statement> {statements} CLCURL
<function_def_parameters>::= [ARRAY] ID {SEMI [ARRAY] ID}
<variable> ::= ID [<array_idxing_expr>]
<statement>::= ( <function_call> | <loop> | <if_statement> | <assignment_expression> | <array_declaration> | <array_idxing_expr> | <return> ) ENDL
<return>::= RETURN [<value>] 
<function_call>::= CALL ID OPPARENT [<arguments>] CLPARENT
<arguments> ::= <value> {SEMI <value>}
<value>::= NUM | ID [<array_idxing_expr>] | 'WU’ | 'AG' | 'PT' | 'GO' | 'BR' | 'GL' | 'ST' | 'EM' | 'SC' | 'BU' | 'EA' | 'WE' | 'SO' | 'NO’
<condition> ::= OPPARENT <comparison> { <logic_op> <comparison> } CLPARENT
<comparison> ::= <comparison_opnd> <comparison_op> <comparison_opnd>
<comparison_opnd> ::= <variable>
<comparison_op>::= EQU | SMALL | SMALLQUI | NOTEQUI
<logic_op>::= NOT | AND | OR
<assignment_expression>::= <variable> ASSIGN <expression>
<expression>::= <function_call> | <value> [<addop> { <addop> }]
<addop>::= ( ADD | SUB ) <value> | <multiplication>
<multiplication>::= ( MUL | DIV ) <value>
<array_declaration>::= ARRAY ID <size> <size>
<size>::= OPBRACK NUM CLBRACKET
<array_idxing_expr> ::= <placing> <placing>
<placing> ::= OPBRACK <place> CLBRACKET
<place> ::= ID | NUM
<loop>::= LOOP <condition> OPCURL <statements> CLCURL
<if_statement>::= IF <condition> OPCURL <statements> CLCURL [<else_statement>]
<else_statement>::= ELSE OPCURL <statements> CLCURL